var documenterSearchIndex = {"docs":
[{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"pkg> add https://github.com/CNCLgithub/GenRFS","category":"page"},{"location":"getting_started/#Example","page":"Getting Started","title":"Example","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"This work generalizes common examples of random finite sets (RFS) such as poission multi-bernoulli RFS and presents a common API to build a spec of an arbritrary collection of RandomFiniteElement. Below we define such a random finite set using the type alias RFSElements.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Random\nRandom.seed!(1234)\nusing Gen\nusing GenRFS\n# Here we are defining a simple poisson multi-bernoulli\npmbrfs = RFSElements{Float64}(undef, 2) # will have 2 rfe's\nr1 = 3\np1 = PoissonElement{Float64}(r1, normal, (0., 1.0))\nr2 = 0.4\nb1 = BernoulliElement{Float64}(r2, uniform, (-1.0, 1.0))\npmbrfs[1] = p1\npmbrfs[2] = b1\npmbrfs","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"We can then treat pmbrfs as an argument to the rfs random variable using Gen.Distribution syntax.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"\nxs = rfs(pmbrfs)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The loglikelihood of this sample is computing with partial memoization.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"note: Note\nDue to the memoization of the partition table, the first call to Gen.logpdf may be slow","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Gen.logpdf(rfs, xs, pmbrfs)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"In addition, we can access to the different data correspondences present in calculation of the likelihood with AssociationRecord.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"record = AssociationRecord(5) # returning the top 5 correspondences\nGen.logpdf(rfs, xs, pmbrfs, record)\nDict(zip(record.table, record.logscores))","category":"page"},{"location":"ref/rfs/#Random-Finite-Sets","page":"Random Finite Sets","title":"Random Finite Sets","text":"","category":"section"},{"location":"#GenRFS","page":"GenRFS","title":"GenRFS","text":"","category":"section"},{"location":"","page":"GenRFS","title":"GenRFS","text":"Support for random finite sets in Gen.jl","category":"page"},{"location":"","page":"GenRFS","title":"GenRFS","text":"CurrentModule = GenRFS\nDocTestSetup  = quote\n    using Gen\n    using GenRFS\nend","category":"page"},{"location":"","page":"GenRFS","title":"GenRFS","text":"Pages = [\n    \"getting_started.md\",\n]\nDepth = 2","category":"page"},{"location":"","page":"GenRFS","title":"GenRFS","text":"Reference","category":"page"},{"location":"","page":"GenRFS","title":"GenRFS","text":"Pages = [\n    \"ref/rfs.md\",\n    \"ref/rfe.md\",\n]\nDepth = 2","category":"page"},{"location":"#API","page":"GenRFS","title":"API","text":"","category":"section"},{"location":"","page":"GenRFS","title":"GenRFS","text":"Modules = [GenRFS]","category":"page"},{"location":"#GenRFS.AbstractRFS","page":"GenRFS","title":"GenRFS.AbstractRFS","text":"Random Finite Set\n\n\n\n\n\n","category":"type"},{"location":"#GenRFS.AssociationRecord","page":"GenRFS","title":"GenRFS.AssociationRecord","text":"Contains a record of the top n data associations\n\nHas two fields:\n\ntable\nlogscores\n\n\n\n\n\n","category":"type"},{"location":"#GenRFS.RFSElements","page":"GenRFS","title":"GenRFS.RFSElements","text":"A type alias for random finite elements\n\n\n\n\n\n","category":"type"},{"location":"#GenRFS.associations-Union{Tuple{T}, Tuple{Array{RandomFiniteElement{T},1},Array{T,1}}} where T","page":"GenRFS","title":"GenRFS.associations","text":"Computes the logscore of every correspondence\n\nReturns a vector where each element is indexed in the partition table.\n\n\n\n\n\n","category":"method"},{"location":"#GenRFS.bounds-Tuple{RandomFiniteElement}","page":"GenRFS","title":"GenRFS.bounds","text":"The lower and upper bounds of map cardinality\n\n\n\n\n\n","category":"method"},{"location":"#GenRFS.cardinality-Tuple{RandomFiniteElement,Int64}","page":"GenRFS","title":"GenRFS.cardinality","text":"The log probability P(|{x}| | rfe) The log probability of the cardinality of an observation for an RFE.\n\n\n\n\n\n","category":"method"},{"location":"#GenRFS.contains-Tuple{Array{RandomFiniteElement{T},1} where T,Int64}","page":"GenRFS","title":"GenRFS.contains","text":"Whether the given RFS can support the cardinality of the observation\n\n\n\n\n\n","category":"method"},{"location":"#GenRFS.partition-Tuple{Array{RandomFiniteElement{T},1} where T,Int64}","page":"GenRFS","title":"GenRFS.partition","text":"Generates the partition table for a given set of size n.\n\nOnly valid when the random finite set contains the observed set.\n\n\n\n\n\n","category":"method"},{"location":"#GenRFS.partition_press-Tuple{Array{Int64,1},Array{Int64,1},Int64}","page":"GenRFS","title":"GenRFS.partition_press","text":"Returns the combination table for correspondence cardinality.\n\nFor an ordered set of morphological bounds, returns a table where each row describes a different combination of cardinalities of assignments.\n\nie\n\njulia> GenRFS.partition_press([4,1,1],[0,0,0], 4)\n4-element Array{Array{Int64,1},1}:\n [2, 1, 1]\n [3, 1, 0]\n [3, 0, 1]\n [4, 0, 0]\n\n\n\n\n\n","category":"method"},{"location":"#GenRFS.partition_push-Tuple{Array{Int64,1},Array{Int64,1}}","page":"GenRFS","title":"GenRFS.partition_push","text":"Returns a table of all associations for a given cardinality combination.\n\nRows are the complete disjoint partitioning of the elements in xs onto elements described in cs\n\neg.\n\njulia> GenRFS.partition_push([2,1,1], [1,2,3,4])\n12-element Array{Array{Array{Int64,1},1},1}:\n [[1, 2], [3], [4]]\n [[1, 2], [4], [3]]\n [[1, 3], [2], [4]]\n [[1, 3], [4], [2]]\n [[1, 4], [2], [3]]\n [[1, 4], [3], [2]]\n [[2, 3], [1], [4]]\n [[2, 3], [4], [1]]\n [[2, 4], [1], [3]]\n [[2, 4], [3], [1]]\n [[3, 4], [1], [2]]\n [[3, 4], [2], [1]]\n\n\n\n\n\n","category":"method"},{"location":"#GenRFS.partition_table-Tuple{Array{Int64,1},Array{Int64,1},Int64}","page":"GenRFS","title":"GenRFS.partition_table","text":"Returns the partition table given the morphological bounds of RFEs\n\nEach top level entry is a possible partition. Within each partions, each entry describes the associations of observation elements to a given element.\n\nThe elements are ordered by upper morphological bound in descending order.\n\nNOTE: Isomorphic elements are not currently supported\n\n\n\n\n\n","category":"method"},{"location":"#GenRFS.support-Union{Tuple{T}, Tuple{RandomFiniteElement{T},T}} where T","page":"GenRFS","title":"GenRFS.support","text":"The probability of P(x | dist(rfe)) The loglikelihood of a component, x, given the distribution contained by the element.\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"GenRFS","title":"Index","text":"","category":"section"},{"location":"","page":"GenRFS","title":"GenRFS","text":"","category":"page"},{"location":"ref/rfe/#Random-Finite-Elements","page":"Random Finite Elements","title":"Random Finite Elements","text":"","category":"section"}]
}
